!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddOneToListHead	list.c	/^AddOneToListHead(struct Iterator* io_IHead , struct ListNode* in_NodeOfAdding )$/;"	f
AddOneToListHeadSafe	list.c	/^AddOneToListHeadSafe(struct Iterator* pa_pIHead, struct Iterator* pa_pINow , struct Iterator* pa_pIForward , struct ListNode* in_NodeOfAdding )$/;"	f
AddOneToListTail	list.c	/^AddOneToListTail(struct Iterator* io_IHead , struct ListNode* in_NodeOfAdding )$/;"	f
AddOneToListTailSafe	list.c	/^AddOneToListTailSafe(struct Iterator* pa_pIHead, struct Iterator* pa_pINow , struct Iterator* pa_pIForward , struct ListNode* in_NodeOfAdding )$/;"	f
AddrMe	sock.h	/^	struct sockaddr_in AddrTa,AddrMe,AddrRecvfrom;$/;"	m	struct:Sock	typeref:struct:Sock::
AddrRecvfrom	sock.h	/^	struct sockaddr_in AddrTa,AddrMe,AddrRecvfrom;$/;"	m	struct:Sock	typeref:struct:Sock::
AddrTa	sock.h	/^	struct sockaddr_in AddrTa,AddrMe,AddrRecvfrom;$/;"	m	struct:Sock	typeref:struct:Sock::sockaddr_in
AttachTo	tree.c	/^AttachTo(struct TreeNode* pa_pFrom ,struct TreeNode* pa_pTo )$/;"	f
BDG_ADDR	bdgmsg.h	151;"	d
BDG_READ_OPT_ADDR_FILTER	bdgmsg.h	21;"	d
BDG_READ_OPT_ANY	bdgmsg.h	20;"	d
BDG_READ_OPT_MSG_FILTER	bdgmsg.h	22;"	d
BKGD_CMD_MAX_LEN	bkgd.c	15;"	d	file:
BOOL	comdef.h	19;"	d
BOOL	sock.h	36;"	d
BRIDGE_MSG_ERR_CONNECT_ADDR	bdgmsg.h	44;"	d
BRIDGE_MSG_ERR_ERROR	bdgmsg.h	50;"	d
BRIDGE_MSG_ERR_NAMEID_EXIST	bdgmsg.h	30;"	d
BRIDGE_MSG_ERR_NO_NAMEID	bdgmsg.h	38;"	d
BRIDGE_MSG_ERR_NO_SEED_TO_RELAY	bdgmsg.h	49;"	d
BRIDGE_MSG_INFO_ACKNOWLEDGE	bdgmsg.h	51;"	d
BRIDGE_MSG_INFO_CONNECT	bdgmsg.h	36;"	d
BRIDGE_MSG_INFO_CONNECT_ADDR	bdgmsg.h	43;"	d
BRIDGE_MSG_INFO_CONNECT_BEGIN	bdgmsg.h	37;"	d
BRIDGE_MSG_INFO_ECHO	bdgmsg.h	34;"	d
BRIDGE_MSG_INFO_ESTABLISHED	bdgmsg.h	47;"	d
BRIDGE_MSG_INFO_HELLO	bdgmsg.h	46;"	d
BRIDGE_MSG_INFO_HELLO_BDG	bdgmsg.h	26;"	d
BRIDGE_MSG_INFO_IAM_HERE	bdgmsg.h	27;"	d
BRIDGE_MSG_INFO_PUNCHING	bdgmsg.h	40;"	d
BRIDGE_MSG_INFO_PUNCHING_FINISH	bdgmsg.h	41;"	d
BRIDGE_MSG_INFO_REGISTER	bdgmsg.h	29;"	d
BRIDGE_MSG_INFO_RGST_OK	bdgmsg.h	31;"	d
BRIDGE_MSG_INFO_UNKNOWN	bdgmsg.h	24;"	d
BRIDGE_MSG_INFO_WAITING	bdgmsg.h	33;"	d
BRIDGE_MSG_INFO_WAIT_RELAY	bdgmsg.h	53;"	d
BYS	comdef.h	72;"	d
BackGroundArgs	bkgd.h	/^struct BackGroundArgs$/;"	s
BackGroundPOP3ProcMake	bkgd.c	/^BackGroundPOP3ProcMake( struct POP3Proc *pa_pPop3Proc , const char *pa_pHostIP , ushort pa_HostPort , BOOL pa_ifEnableSSL , const char *pa_pUsrName , const char *pa_pPassWord )$/;"	f	file:
Base64Encode	base64.c	/^Base64Encode(char *src, int src_len, char *dst)$/;"	f
BdgClientProcNotify	bdgfun.c	/^BdgClientProcNotify(struct Process *pa_)$/;"	f
BdgHelloNotify	keyinfo.c	/^BdgHelloNotify(struct Process *pa_)$/;"	f	file:
BdgMsg	bdgmsg.h	/^		struct BridgeMsg BdgMsg;$/;"	m	union:TkNetMsg::__anon1	typeref:struct:TkNetMsg::__anon1::BridgeMsg
BdgMsgRead	bdgfun.c	/^BdgMsgRead(struct Process *in_proc , uchar pa_option , uchar pa_msg , struct NetAddr *pa_pAddr)$/;"	f
BdgMsgWrite	bdgfun.c	/^BdgMsgWrite(struct Process *in_proc ,struct BridgeMsg *in_msg , struct NetAddr *pa_pAddr)$/;"	f
BdgProc	peerdata.h	/^	struct BridgeProc  BdgProc;$/;"	m	struct:PeerData	typeref:struct:PeerData::BridgeProc
BdgSubServerProcInit	bdgfun.c	/^BdgSubServerProcInit()$/;"	f
BdgSubServerProcNotify	bdgfun.c	/^BdgSubServerProcNotify(struct Process *pa_)$/;"	f
BetweenMacro	bdgmsg.h	/^BetweenMacro( struct Peer *pa_pPeer0, struct Peer *pa_pPeer1 )$/;"	f
BinAttachTo	tree.c	/^BinAttachTo(struct BinTreeNode* pa_pFrom , struct BinTreeNode* pa_pTo , BOOL pa_ifRight)$/;"	f
BinDisattach	tree.c	/^BinDisattach(struct BinTreeNode* pa_pBtn)$/;"	f
BinTreeCompareCallback	tree.h	/^typedef BOOL (*BinTreeCompareCallback)(struct BinTreeNode* ,struct BinTreeNode* , void*);$/;"	t
BinTreeFind	tree.c	/^BinTreeFind(struct BinTreeNode* pa_pBtn , struct BinTreeNode* pa_pFind , BinTreeCompareCallback pa_cmp ,BinTreeCompareCallback pa_CmpEq , void* pa_else)$/;"	f
BinTreeInorderTraversal	tree.c	/^BinTreeInorderTraversal(struct BinTreeNode* pa_pRoot , ListNodeCallBack pa_NodeCallback , void* pa_else )$/;"	f
BinTreeInsert	tree.c	/^BinTreeInsert(struct BinTreeNode* pa_pFrom , struct BinTreeNode* pa_pTo ,BinTreeCompareCallback pa_cmp , void* pa_else)$/;"	f
BinTreeNode	tree.h	/^struct BinTreeNode$/;"	s
BkgdEnterSubProcess	bkgd.c	/^BkgdEnterSubProcess()$/;"	f
BkgdGetBackGroundMsg	bkgd.c	/^BkgdGetBackGroundMsg()$/;"	f
BkgdLeaveSubProcess	bkgd.c	/^BkgdLeaveSubProcess()$/;"	f
BkgdNatTypeNotify	bkgd.c	/^BkgdNatTypeNotify(struct Process *pa_)$/;"	f	file:
BkgdProcEndCallbk	bkgd.c	/^BkgdProcEndCallbk(struct Process *pa_)$/;"	f	file:
Branch	tree.h	/^struct Branch$/;"	s
BridgeClientProcPa	bdgmsg.h	/^struct BridgeClientProcPa$/;"	s
BridgeClientTryBdgServerProc	bdgfun.c	/^BridgeClientTryBdgServerProc(struct BridgeProc *pa_pBdgProc,struct BridgeHelloStepPa *pa_pProcPa , struct Sock *pa_pMainSock)$/;"	f
BridgeHelloStepPa	bdgmsg.h	/^struct BridgeHelloStepPa$/;"	s
BridgeMakeClientProc	bdgfun.c	/^BridgeMakeClientProc(struct BridgeProc *pa_pBdgProc, struct Sock *pa_pMainSock ,struct ProcessingList *pa_pProcList,struct NetAddr *pa_pAddr, char *pa_pMyNameID ,uchar pa_MyNatType , char **pa_ppTargetNameID , BOOL pa_ifSkipRegister)$/;"	f
BridgeMsg	bdgmsg.h	/^struct BridgeMsg$/;"	s
BridgeProc	bdgmsg.h	/^struct BridgeProc$/;"	s
Bys	comdef.h	/^struct Bys$/;"	s
CACERT	sock.h	55;"	d
CERTF	sock.h	53;"	d
CONNECT_CALLBK	bdgmsg.h	/^typedef void (*CONNECT_CALLBK)(struct NetAddr,struct Sock*,struct ProcessingList*,struct Iterator*,struct Iterator*);$/;"	t
CONNECT_DECISION_FLAG_A_SIDE_RELAY	bdgmsg.h	58;"	d
CONNECT_DECISION_FLAG_BEGIN	bdgmsg.h	55;"	d
CONNECT_DECISION_FLAG_B_SIDE_RELAY	bdgmsg.h	59;"	d
CONNECT_DECISION_FLAG_DIRECT	bdgmsg.h	56;"	d
CONNECT_DECISION_FLAG_ERR	bdgmsg.h	57;"	d
ChangeAddr	nattype.h	/^	struct NetAddr ChangeAddr;$/;"	m	struct:STUNProc	typeref:struct:STUNProc::NetAddr
ChangeRequest	stun.h	/^struct ChangeRequest$/;"	s
ChatProcess	test/demo.c	/^struct ChatProcess$/;"	s	file:
ConAddrNameID	bdgmsg.h	/^	char            ConAddrNameID[PEER_NAME_ID_LEN];$/;"	m	struct:BridgeProc
ConnectionOvertimeNotify	test/demo.c	/^ConnectionOvertimeNotify(struct Process *pa_)$/;"	f	file:
ConsAndStartBridgeServer	bdgfun.c	/^ConsAndStartBridgeServer(struct BridgeProc *pa_pBdgProc , struct PeerData *pa_pPeerDataRoot , struct ProcessingList *pa_pProcList , struct Sock *pa_pMainSock , struct Iterator *pa_pSeedPeerCache)$/;"	f
CurrentStepRetrys	netproc.h	/^	uchar            CurrentStepRetrys;$/;"	m	struct:Process
CurrentStepStartTime	netproc.h	/^	long             CurrentStepStartTime;$/;"	m	struct:Process
DECLARATION_STRUCT_CONSTRUCTOR	comdef.h	33;"	d
DEF_AND_CAST	comdef.h	36;"	d
DEF_FREE_LIST_ELEMENT_CALLBACK_FUNCTION	list.h	20;"	d
DEF_FREE_LIST_ELEMENT_SAFE_FUNCTION	list.h	53;"	d
DEF_FREE_TREE_ELEMENT_CALLBACK_FUNCTION	tree.h	14;"	d
DEF_STRUCT_CONSTRUCTOR	comdef.h	26;"	d
DataMsg	bdgmsg.h	/^		char DataMsg[TK_NET_DATA_LEN];$/;"	m	union:TkNetMsg::__anon1
DecisionConAddr	bdgmsg.h	/^	struct NetAddr  DecisionPunAddr,DecisionConAddr;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::
DecisionFlag	bdgmsg.h	/^	uchar           DecisionFlag;$/;"	m	struct:BridgeProc
DecisionPunAddr	bdgmsg.h	/^	struct NetAddr  DecisionPunAddr,DecisionConAddr;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::NetAddr
DecisionRelayID	bdgmsg.h	/^	uint            DecisionRelayID;$/;"	m	struct:BridgeProc
DirectConnectAddr	bdgmsg.h	/^	struct NetAddr  DirectConnectAddr;$/;"	m	struct:BridgeClientProcPa	typeref:struct:BridgeClientProcPa::NetAddr
Disattach	tree.c	/^Disattach(struct TreeNode* pa_pTn)$/;"	f
DoProcessing	netproc.c	/^DoProcessing( struct ProcessingList *pa_pProcList )$/;"	f
EXTERN_STEP	netproc.h	49;"	d
EXTERN_STEP	relay.c	/^EXTERN_STEP( Relay )$/;"	f
Else	bdgmsg.h	/^	void   *Else;$/;"	m	struct:BridgeProc
ErrCode	bdgmsg.h	/^	uchar           ErrCode;$/;"	m	struct:BridgeProc
ErrCode	bdgmsg.h	/^	uchar          ErrCode;$/;"	m	struct:BridgeMsg
FindKeyInfoByAddrPa	keyinfo.h	/^struct FindKeyInfoByAddrPa$/;"	s
FindKeyInfoByNumPa	keyinfo.h	/^struct FindKeyInfoByNumPa$/;"	s
FindKeyInfoByStrArg	bkgd.c	/^FindKeyInfoByStrArg(struct KeyInfoCache *pa_pInfoChache,char *pa_pStrArg)$/;"	f	file:
FindKeyInfoByTypePa	keyinfo.h	/^struct FindKeyInfoByTypePa$/;"	s
FindKeyInfoByValidPa	keyinfo.h	/^struct FindKeyInfoByValidPa$/;"	s
FindRelayProcByRelayIDPa	relay.c	/^struct FindRelayProcByRelayIDPa$/;"	s	file:
FindSeedPeerOfLeastRelaysPa	peerdata.c	/^struct FindSeedPeerOfLeastRelaysPa$/;"	s	file:
FindStepByNamePa	netproc.h	/^struct FindStepByNamePa$/;"	s
FindStepWithFlagNumPa	netproc.h	/^struct FindStepWithFlagNumPa$/;"	s
FlagName	netproc.c	/^FlagName(struct Process *pa_pProc ,const char *pa_pName)$/;"	f
FlagNum	netproc.h	/^	uchar            FlagNum;$/;"	m	struct:ProcessStep
FlagNum	netproc.h	/^FlagNum(uchar pa_FlagNum)$/;"	f
FlagNumToFind	netproc.h	/^	uchar             FlagNumToFind;$/;"	m	struct:FindStepWithFlagNumPa
ForEach	list.c	/^ForEach(struct Iterator* io_IHead , ListNodeCallBack pa_node_callback ,void* pa_else )$/;"	f
FreeBdgClientProc	bdgfun.c	/^FreeBdgClientProc(struct BridgeProc *pa_pBdgProc)$/;"	f
FreeBridgeServer	bdgfun.c	/^FreeBridgeServer(struct BridgeProc *pa_pBdgProc)$/;"	f
GET_STRUCT_ADDR	comdef.h	41;"	d
GET_STRUCT_ADDR_FROM_IT	list.h	14;"	d
GetAddrFromSockAddr	netaddr.h	/^GetAddrFromSockAddr( struct sockaddr_in *in_SockAddr)$/;"	f
GetAddrText	netaddr.h	/^GetAddrText( struct NetAddr *pa_pAddr , char *out_str)$/;"	f
GetIPText	netaddr.h	/^GetIPText( struct NetAddr *pa_pAddr , char *out_str)$/;"	f
GetIPTextAndPort	sock.c	/^GetIPTextAndPort(struct sockaddr_in* in_addr , ushort* out_pPort , char* pa_pBuff )$/;"	f
GetIPVal	sock.c	/^uint GetIPVal(const char* in_text)$/;"	f
GetIterator	list.c	/^GetIterator(struct ListNode* in_node)$/;"	f
GetLevelPa	tree.c	/^struct GetLevelPa$/;"	s	file:
GetNextSeparateStr	keyinfo.c	/^GetNextSeparateStr(char ** io_pStrNow)$/;"	f
HostIPVal	nattype.h	/^	int            HostIPVal;$/;"	m	struct:STUNProc
HostIPVal	popmail.h	/^	int             HostIPVal;$/;"	m	struct:POP3Proc
HostIPVal	smtpmail.h	/^	int             HostIPVal;$/;"	m	struct:SMTPProc
HostPort	nattype.h	/^	ushort         HostPort;$/;"	m	struct:STUNProc
HostPort	popmail.h	/^	ushort          HostPort;$/;"	m	struct:POP3Proc
HostPort	smtpmail.h	/^	ushort          HostPort;$/;"	m	struct:SMTPProc
I	test/demos/list-demo.c	/^struct I$/;"	s	file:
IChildren	tree.h	/^	struct Iterator IChildren;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::Iterator
IF_NEAD_RELAY	bdgmsg.h	154;"	d
IFound	netproc.h	/^	struct Iterator   IFound;$/;"	m	struct:FindStepWithFlagNumPa	typeref:struct:FindStepWithFlagNumPa::Iterator
IKeyInfo	keyinfo.h	/^	struct Iterator IKeyInfo;$/;"	m	struct:KeyInfoCache	typeref:struct:KeyInfoCache::Iterator
IMailsHead	popmail.h	/^	struct Iterator IMailsHead;$/;"	m	struct:POP3Proc	typeref:struct:POP3Proc::Iterator
IProcessHead	netproc.h	/^	struct Iterator  IProcessHead;$/;"	m	struct:Process	typeref:struct:Process::Iterator
IProcessNow	netproc.h	/^	struct Iterator  IProcessNow;$/;"	m	struct:Process	typeref:struct:Process::Iterator
IPv4	netaddr.h	/^	uint    IPv4; $/;"	m	struct:NetAddr
IRetrieveNow	popmail.h	/^	struct Iterator IRetrieveNow;$/;"	m	struct:POP3Proc	typeref:struct:POP3Proc::Iterator
IS_DEPTH_END	tree.c	322;"	d	file:
IS_LIST_END	tree.c	321;"	d	file:
IUndergoProcess	netproc.h	/^	struct Iterator  IUndergoProcess;$/;"	m	struct:ProcessingList	typeref:struct:ProcessingList::Iterator
Iterator	list.h	/^struct Iterator$/;"	s
KEYF	sock.h	54;"	d
KEY_INFO_MAX_LEN	keyinfo.h	14;"	d
KEY_INFO_TYPE_BRIDGEPEER	keyinfo.h	18;"	d
KEY_INFO_TYPE_CONFIG	keyinfo.h	16;"	d
KEY_INFO_TYPE_MAILSERVER	keyinfo.h	17;"	d
KEY_INFO_TYPE_SMTPSERVER	keyinfo.h	20;"	d
KEY_INFO_TYPE_STUNSERVER	keyinfo.h	19;"	d
KEY_INFO_VALID_NOT	keyinfo.h	23;"	d
KEY_INFO_VALID_UNSURE	keyinfo.h	22;"	d
KEY_INFO_VALID_WORKS	keyinfo.h	24;"	d
KeyInfo	keyinfo.h	/^struct KeyInfo$/;"	s
KeyInfoCache	keyinfo.h	/^struct KeyInfoCache$/;"	s
KeyInfoFree	keyinfo.c	/^KeyInfoFree(struct KeyInfoCache *pa_pCache)$/;"	f
KeyInfoNumbers	keyinfo.h	/^	int KeyInfoNumbers;$/;"	m	struct:KeyInfoCache
KeyInfoReadFile	keyinfo.c	/^KeyInfoReadFile( struct KeyInfoCache *pa_pCache , const char *pa_pFileName )$/;"	f
KeyInfoSelectA	keyinfo.c	/^KeyInfoSelectA( struct KeyInfoCache *pa_pCache , uchar pa_type )$/;"	f
KeyInfoTrace	keyinfo.c	/^KeyInfoTrace( struct KeyInfoCache *pa_pCache )$/;"	f
KeyInfoTry	keyinfo.c	/^KeyInfoTry(struct KeyInfoCache *pa_pInfoChache , uchar pa_type , struct Sock *pa_pMainSock)$/;"	f
KeyInfoUpdate	keyinfo.c	/^KeyInfoUpdate( struct KeyInfoCache *pa_pCache )$/;"	f
KeyInfoUse	keyinfo.c	/^KeyInfoUse( struct KeyInfo *pa_pInfo , struct KeyInfoCache *pa_pKeyInfoCache ,struct Sock *pa_pMainSock)$/;"	f
KeyInfoWorksFine	keyinfo.c	/^KeyInfoWorksFine( struct KeyInfoCache *pa_pCache , int pa_num )$/;"	f
KeyInfoWriteFile	keyinfo.c	/^KeyInfoWriteFile( struct KeyInfoCache *pa_pCache , const char *pa_pFileName )$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	keyinfo.c	/^LIST_ITERATION_CALLBACK_FUNCTION( DeleKeyInfoByType )$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	keyinfo.c	/^LIST_ITERATION_CALLBACK_FUNCTION( LoadMail )$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	keyinfo.c	/^LIST_ITERATION_CALLBACK_FUNCTION(FindKeyInfoByAddr)$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	keyinfo.c	/^LIST_ITERATION_CALLBACK_FUNCTION(FindKeyInfoByNum)$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	keyinfo.c	/^LIST_ITERATION_CALLBACK_FUNCTION(FindKeyInfoByValid)$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	keyinfo.c	/^LIST_ITERATION_CALLBACK_FUNCTION(FindKeyInfoNotUsedByType)$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	keyinfo.c	/^LIST_ITERATION_CALLBACK_FUNCTION(TraceKeyInfo)$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	keyinfo.c	/^LIST_ITERATION_CALLBACK_FUNCTION(WriteKeyInfo)$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	list.c	/^LIST_ITERATION_CALLBACK_FUNCTION( SortingInsert )$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	list.c	/^LIST_ITERATION_CALLBACK_FUNCTION(ReverseListCallback)$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	list.c	/^LIST_ITERATION_CALLBACK_FUNCTION(SortListCallback)$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	list.h	17;"	d
LIST_ITERATION_CALLBACK_FUNCTION	netproc.c	/^LIST_ITERATION_CALLBACK_FUNCTION( DoProcess )$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	netproc.c	/^LIST_ITERATION_CALLBACK_FUNCTION( FindStepByName )$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	netproc.c	/^LIST_ITERATION_CALLBACK_FUNCTION( FindStepWithFlagNum )$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	netproc.c	/^LIST_ITERATION_CALLBACK_FUNCTION( ProcessingListTraceCallbk )$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	netproc.c	/^LIST_ITERATION_CALLBACK_FUNCTION( TraceProcStep )$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	peerdata.c	/^LIST_ITERATION_CALLBACK_FUNCTION( TracePeerData )$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	peerdata.c	/^LIST_ITERATION_CALLBACK_FUNCTION(FindSeedPeerOfLeastRelays)$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	popmail.c	/^LIST_ITERATION_CALLBACK_FUNCTION( TraceMail )$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	relay.c	/^LIST_ITERATION_CALLBACK_FUNCTION(FindRelayProcByRelayID)$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	relay.c	/^LIST_ITERATION_CALLBACK_FUNCTION(TraceRelayProc)$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	test/demos/list-demo.c	/^LIST_ITERATION_CALLBACK_FUNCTION(trace)$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	test/demos/treap-demo.c	/^LIST_ITERATION_CALLBACK_FUNCTION( TraceTreap )$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	test/demos/tree-demo.c	/^LIST_ITERATION_CALLBACK_FUNCTION( TraceBinTree )$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	tree.c	/^LIST_ITERATION_CALLBACK_FUNCTION( BFS )$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	tree.c	/^LIST_ITERATION_CALLBACK_FUNCTION( CopyBranchesCallback )$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	tree.c	/^LIST_ITERATION_CALLBACK_FUNCTION( GetLevelCallback )$/;"	f	file:
LIST_ITERATION_CALLBACK_FUNCTION	tree.c	/^LIST_ITERATION_CALLBACK_FUNCTION( PostorderDFS )$/;"	f
LIST_ITERATION_CALLBACK_FUNCTION	tree.c	/^LIST_ITERATION_CALLBACK_FUNCTION( PreorderDFS )$/;"	f
LIST_SAFE_RETURN	list.h	38;"	d
LOG_FILES	sysi.h	39;"	d
LOG_FOPEN	sysi.c	72;"	d	file:
LeastRelays	peerdata.c	/^	uchar           LeastRelays;$/;"	m	struct:FindSeedPeerOfLeastRelaysPa	file:
LeftChild	tree.h	/^	struct BinTreeNode 	*LeftChild,*RightChild;$/;"	m	struct:BinTreeNode	typeref:struct:BinTreeNode::BinTreeNode
LevelStack	tree.c	/^	struct Iterator LevelStack;$/;"	m	struct:GetLevelPa	typeref:struct:GetLevelPa::Iterator	file:
LevelStackEle	tree.c	/^struct LevelStackEle$/;"	s	file:
ListNode	list.h	/^struct ListNode$/;"	s
ListNodeCallBack	list.h	/^typedef BOOL (*ListNodeCallBack)(struct Iterator* , struct Iterator* ,struct Iterator* ,void*);$/;"	t
MAX_MAIL_CONTENT_LEN	popmail.h	14;"	d
MAX_NUM	test/demos/treap-demo.c	75;"	d	file:
MAX_RELAYS_TO_SELECT_SEED	peerdata.h	14;"	d
MEMBER_OFFSET	comdef.h	39;"	d
MagicCookieTemp	nattype.h	/^	uint           MagicCookieTemp;$/;"	m	struct:STUNProc
MailAddr	smtpmail.h	/^	char            MailAddr[SMTP_PROTO_MAIL_ADDR_MAX_LEN];$/;"	m	struct:SMTPProc
MailContentBuff	popmail.h	/^	char            MailContentBuff[SOCK_RECV_BUFF_LEN];$/;"	m	struct:POP3Proc
MakeProtoPOP3Proc	popmail.c	/^MakeProtoPOP3Proc( struct POP3Proc *pa_pPop3Proc , const char *pa_pHostIP , ushort pa_HostPort , BOOL pa_ifEnableSSL , const char *pa_pUsrName , const char *pa_pPassWord )$/;"	f
MakeProtoStunProc	nattype.c	/^MakeProtoStunProc( struct STUNProc *pa_pStunProc ,struct Sock *pa_pSock , const char *pa_pHostIP , ushort pa_HostPort )$/;"	f
MapAddr	nattype.h	/^	struct NetAddr MapAddr;$/;"	m	struct:STUNProc	typeref:struct:STUNProc::NetAddr
MultiSendInfo	bdgmsg.h	/^	uchar           MultiSendInfo;$/;"	m	struct:BridgeProc
MultiSendTo	bdgmsg.h	/^	struct NetAddr  MultiSendTo;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::NetAddr
MutexDelete	sysi.h	72;"	d
MutexDelete	sysi.h	80;"	d
MutexInit	sysi.h	69;"	d
MutexInit	sysi.h	77;"	d
MutexLock	sysi.h	70;"	d
MutexLock	sysi.h	78;"	d
MutexUnlock	sysi.h	71;"	d
MutexUnlock	sysi.h	79;"	d
NATType	bdgmsg.h	/^	uchar          NATType;$/;"	m	struct:BridgeMsg
NATType	bdgmsg.h	/^	uchar          NATType;$/;"	m	struct:Peer
NATType	peerdata.h	/^	uchar              NATType;$/;"	m	struct:PeerData
NAT_T_FULL_CONE	nattype.h	14;"	d
NAT_T_PORT_RESTRICTED	nattype.h	16;"	d
NAT_T_RESTRICTED	nattype.h	15;"	d
NAT_T_SYMMETRIC	nattype.h	17;"	d
NAT_T_UNKNOWN	nattype.h	18;"	d
NULL	comdef.h	15;"	d
NameID	bdgmsg.h	/^	char           NameID[PEER_NAME_ID_LEN];$/;"	m	struct:BridgeMsg
NameID	bdgmsg.h	/^	char           NameID[PEER_NAME_ID_LEN];$/;"	m	struct:Peer
NameID	peerdata.h	/^	char               NameID[PEER_NAME_ID_LEN];$/;"	m	struct:PeerData
NatTypePrint	nattype.c	/^NatTypePrint(uchar pa_type)$/;"	f
NatTypeRes	nattype.h	/^	uchar          NatTypeRes;$/;"	m	struct:STUNProc
NetAddr	netaddr.h	/^NetAddr(const char *pa_pIPText,ushort pa_port)$/;"	f
NetAddr	netaddr.h	/^struct NetAddr$/;"	s
NetInfoMail	popmail.h	/^struct NetInfoMail$/;"	s
NewKeyInfoFromStrLine	keyinfo.c	/^NewKeyInfoFromStrLine(char *io_pStr)$/;"	f	file:
NewPeerDataWithBdgProc	bdgfun.c	/^NewPeerDataWithBdgProc(struct NetAddr pa_addr,uchar pa_NATType,char *pa_pName,struct BridgeProc *pa_pBdgProc)$/;"	f
Notify	test/demos/nattype-demo.c	/^void Notify(struct Process *pa_)$/;"	f
Notify	test/demos/netproc-demo.c	/^void Notify( struct Process *pa_pProc)$/;"	f
Notify	test/demos/popmail-demo.c	/^void Notify( struct Process *pa_pProc)$/;"	f
Notify	test/demos/smtpmail-demo.c	/^void Notify(struct Process *pa_)$/;"	f
NotifyCallbk	netproc.h	/^	void (*NotifyCallbk)( struct Process * );$/;"	m	struct:Process
NumToFind	keyinfo.h	/^	int NumToFind;$/;"	m	struct:FindKeyInfoByNumPa
ON_CONNECT	bdgmsg.h	189;"	d
ON_CONNECT	test/demo.c	/^ON_CONNECT()$/;"	f
OPT_CHANGEADDR_RES	stun.c	17;"	d	file:
OPT_MAPADDR_RES	stun.c	16;"	d	file:
PEER_NAME_ID_LEN	bdgmsg.h	14;"	d
POP3Proc	popmail.h	/^struct POP3Proc$/;"	s
POP3ProcFree	popmail.c	/^POP3ProcFree( struct POP3Proc *pa_pPop3Proc )$/;"	f
POP3_PROTO_PASSWORD_MAX_LEN	popmail.h	16;"	d
POP3_PROTO_USRNAME_MAX_LEN	popmail.h	15;"	d
PROCESS_ADD_STEP	netproc.h	53;"	d
PS_CALLBK_RET_ABORT	netproc.h	19;"	d
PS_CALLBK_RET_DONE	netproc.h	21;"	d
PS_CALLBK_RET_GO_ON	netproc.h	20;"	d
PS_CALLBK_RET_REDO	netproc.h	22;"	d
PS_CALLBK_RET_TO_END	netproc.h	23;"	d
PS_STATE_FIRST_TIME	netproc.h	14;"	d
PS_STATE_LAST_TIME	netproc.h	17;"	d
PS_STATE_NORMAL	netproc.h	15;"	d
PS_STATE_OVERTIME	netproc.h	16;"	d
ParseSpecialContentToSpace	popmail.c	/^ParseSpecialContentToSpace(char *pa_pStr)$/;"	f	file:
PassWord	popmail.h	/^	char            PassWord[POP3_PROTO_PASSWORD_MAX_LEN];$/;"	m	struct:POP3Proc
PassWord	smtpmail.h	/^	char            PassWord[SMTP_PROTO_PASSWORD_MAX_LEN];$/;"	m	struct:SMTPProc
Peer	bdgmsg.h	/^struct Peer$/;"	s
PeerData	peerdata.h	/^struct PeerData$/;"	s
PeerDataDele	peerdata.c	/^PeerDataDele(struct PeerData *pa_pPD, struct Iterator *pa_pISeedList)$/;"	f
PeerDataDestroy	peerdata.c	/^PeerDataDestroy(struct PeerData *pa_pRoot,struct Iterator *pa_pISeedList)$/;"	f
PeerDataFind	peerdata.c	/^PeerDataFind(struct PeerData *pa_pRoot,char *pa_pNameToFind)$/;"	f
PeerDataInsert	peerdata.c	/^PeerDataInsert(struct PeerData *pa_pPD,struct PeerData *pa_pRoot)$/;"	f
PeerDataSelectAsSeed	peerdata.c	/^PeerDataSelectAsSeed(struct PeerData* pa_pPD , struct Iterator *pa_pISeedList)$/;"	f
PeerDataSetTreeLevel	peerdata.c	/^PeerDataSetTreeLevel(struct TreeNode* pa_pTnd , uint pa_level)$/;"	f	file:
PeerDataTrace	peerdata.c	/^PeerDataTrace(struct PeerData *pa_pRoot)$/;"	f
PeerDataTreapNodeCompare	peerdata.c	/^PeerDataTreapNodeCompare(struct BinTreeNode* pa_pBinNode0 ,$/;"	f	file:
PeerDataUpdateSeedInfo	peerdata.c	/^PeerDataUpdateSeedInfo(struct PeerData *pa_pPD,uchar pa_relays)$/;"	f
PeerTrace	bdgmsg.h	/^PeerTrace( struct Peer *pa_pPeer )$/;"	f
Pop3Notify	keyinfo.c	/^Pop3Notify(struct Process *pa_)$/;"	f	file:
ProcStepLN	netproc.h	/^	struct ListNode  ProcStepLN;$/;"	m	struct:ProcessStep	typeref:struct:ProcessStep::ListNode
Process	netproc.h	/^struct Process$/;"	s
ProcessAddStep	netproc.c	/^ProcessAddStep( struct Process *pa_pProc , StepCallbk pa_StepDo , long **pa_ppWaitClocks , uchar **pa_ppMaxRetrys , const char *pa_pName )$/;"	f
ProcessConsAndSetSteps	netproc.c	/^ProcessConsAndSetSteps( struct Process *out_proc , struct Process *in_proc )$/;"	f
ProcessDisattach	netproc.c	/^ProcessDisattach( struct Process* pa_pProc , struct ProcessingList *pa_pProcList )$/;"	f
ProcessFree	netproc.c	/^ProcessFree( struct Process *pa_pProc )$/;"	f
ProcessSafeStart	netproc.c	/^ProcessSafeStart( struct Process *pa_pProc , struct ProcessingList *pa_pProcList , struct Iterator *pa_pINow , struct Iterator *pa_pIForward )$/;"	f
ProcessSetCondition	netproc.c	/^ProcessSetCondition(uint pa_condition)$/;"	f
ProcessStart	netproc.c	/^ProcessStart( struct Process *pa_pProc , struct ProcessingList *pa_pProcList )$/;"	f
ProcessStep	netproc.h	/^struct ProcessStep$/;"	s
ProcessTraceCondition	netproc.c	/^ProcessTraceCondition(uint pa_condition)$/;"	f	file:
ProcessTraceSteps	netproc.c	/^ProcessTraceSteps(struct Process *pa_pProc)$/;"	f
ProcessUpdateCurrentStep	netproc.c	/^ProcessUpdateCurrentStep(struct Process *pa_pProc)$/;"	f	file:
ProcessingList	netproc.h	/^struct ProcessingList$/;"	s
ProcessingListTrace	netproc.c	/^ProcessingListTrace(struct ProcessingList *pa_pProcList)$/;"	f
PunAddrNameID	bdgmsg.h	/^	char            PunAddrNameID[PEER_NAME_ID_LEN];$/;"	m	struct:BridgeProc
RELAY_MERGE_RES_MERGED	relay.h	16;"	d
RELAY_MERGE_RES_NEW_RELAY	relay.h	15;"	d
RELAY_MERGE_RES_WAITING	relay.h	14;"	d
RanPriority	treap.h	/^	uint RanPriority;$/;"	m	struct:Treap
RecvBuff	sock.h	/^	char	RecvBuff[ SOCK_RECV_BUFF_LEN ];$/;"	m	struct:Sock
RecvLen	sock.h	/^	uint	RecvLen;$/;"	m	struct:Sock
RelayID	bdgmsg.h	/^	uint           RelayID;$/;"	m	struct:BridgeMsg
RelayID	relay.c	/^	uint RelayID;$/;"	m	struct:FindRelayProcByRelayIDPa	file:
RelayID	relay.h	/^	uint            RelayID;$/;"	m	struct:RelayProc
RelayMuduleDestruction	relay.c	/^RelayMuduleDestruction()$/;"	f
RelayProc	relay.h	/^struct RelayProc$/;"	s
RelayProcMerge	relay.c	/^RelayProcMerge(uint pa_RelayID,struct NetAddr pa_addr,struct ProcessingList *pa_pProcList,struct Iterator *pa_pINow, struct Iterator *pa_pIForward,struct Sock *pa_pSock)$/;"	f
RelayProcNotify	relay.c	/^RelayProcNotify(struct Process *pa_)$/;"	f
RelayProcTrace	relay.c	/^RelayProcTrace()$/;"	f
RelayTo	relay.c	/^RelayTo(struct RelayProc *pa_pRelayProc,struct NetAddr *pa_pToAddr)$/;"	f	file:
Relays	bdgmsg.h	/^	uchar          Relays;$/;"	m	struct:BridgeMsg
Relays	peerdata.h	/^	uchar           Relays;$/;"	m	struct:SeedPeer
Retrieves	popmail.h	/^	uint            Retrieves;$/;"	m	struct:POP3Proc
ReverseList	list.c	/^ReverseList( struct Iterator* io_IHead)$/;"	f
RightChild	tree.h	/^	struct BinTreeNode 	*LeftChild,*RightChild;$/;"	m	struct:BinTreeNode	typeref:struct:BinTreeNode::
SMTPProc	smtpmail.h	/^struct SMTPProc$/;"	s
SMTPProcMake	smtpmail.c	/^SMTPProcMake( struct SMTPProc *pa_pSMTPProc , const char *pa_pHostIPText , ushort pa_HostPort , BOOL pa_ifEnableSSL , const char *pa_pUsrName , const char *pa_pPassWord , const char *pa_pMailAddress , const char *pa_pSendBuff )$/;"	f
SMTP_PROTO_MAIL_ADDR_MAX_LEN	smtpmail.h	16;"	d
SMTP_PROTO_PASSWORD_MAX_LEN	smtpmail.h	15;"	d
SMTP_PROTO_USRNAME_MAX_LEN	smtpmail.h	14;"	d
SOCKVAL	sock.h	/^typedef SOCKET SOCKVAL;$/;"	t
SOCKVAL	sock.h	/^typedef int SOCKVAL;$/;"	t
SOCK_ERROR_CDT	sock.h	25;"	d
SOCK_ERROR_CDT	sock.h	41;"	d
SOCK_RECV_BUFF_LEN	sock.h	59;"	d
STEP	bdgstep.c	/^STEP( BdgBeginSubServer )$/;"	f
STEP	bdgstep.c	/^STEP( BdgClientConnectRequire )$/;"	f
STEP	bdgstep.c	/^STEP( BdgClientDoConnectAddr )$/;"	f
STEP	bdgstep.c	/^STEP( BdgClientMultiSendNotify )$/;"	f
STEP	bdgstep.c	/^STEP( BdgClientRegister )$/;"	f
STEP	bdgstep.c	/^STEP( BdgClientTryBdgServer )$/;"	f
STEP	bdgstep.c	/^STEP( BdgClientWait )$/;"	f
STEP	bdgstep.c	/^STEP( BdgConnectAddrServer )$/;"	f
STEP	bdgstep.c	/^STEP( BdgConnectDecision )$/;"	f
STEP	bdgstep.c	/^STEP( BdgConnectRequireReply )$/;"	f
STEP	bdgstep.c	/^STEP( BdgConnectRequireServer )$/;"	f
STEP	bdgstep.c	/^STEP( BdgErrReturnServer )$/;"	f
STEP	bdgstep.c	/^STEP( BdgPunchingServer )$/;"	f
STEP	bdgstep.c	/^STEP( BridgeMain )$/;"	f
STEP	bkgd.c	/^STEP( ProtoPOP3BackGround )$/;"	f
STEP	nattype.c	/^STEP( BindingRequest )$/;"	f
STEP	nattype.c	/^STEP( BindingRequestToAnotherServer )$/;"	f
STEP	nattype.c	/^STEP( ChangeIPAndPort )$/;"	f
STEP	nattype.c	/^STEP( ChangePort )$/;"	f
STEP	netproc.h	45;"	d
STEP	popmail.c	/^STEP( ProtoPOP3Connect )$/;"	f
STEP	popmail.c	/^STEP( ProtoPOP3FirstRecv )$/;"	f
STEP	popmail.c	/^STEP( ProtoPOP3List  )$/;"	f
STEP	popmail.c	/^STEP( ProtoPOP3Password  )$/;"	f
STEP	popmail.c	/^STEP( ProtoPOP3Quit  )$/;"	f
STEP	popmail.c	/^STEP( ProtoPOP3Retr )$/;"	f
STEP	popmail.c	/^STEP( ProtoPOP3User  )$/;"	f
STEP	relay.c	/^STEP( Relay )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPConnect )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPContent  )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPData  )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPFirstRecv )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPHello  )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPMailFrom  )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPPassWord  )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPQuit  )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPRcptTo  )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPStartAuth  )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPTitle  )$/;"	f
STEP	smtpmail.c	/^STEP( SMTPUsrName  )$/;"	f
STEP	test/demo.c	/^STEP( chat )$/;"	f	file:
STEP	test/demos/netproc-demo.c	/^STEP( First )$/;"	f
STEP	test/demos/netproc-demo.c	/^STEP( Second )$/;"	f
STEP	test/demos/netproc-demo.c	/^STEP( Third )$/;"	f
STEP	test/demos/netproc-demo.c	/^STEP( circle )$/;"	f
STUNProc	nattype.h	/^struct STUNProc$/;"	s
STUN_CHANGE_BOTH_IP_PORT	stun.h	17;"	d
STUN_CHANGE_IP	stun.h	18;"	d
STUN_CHANGE_PORT	stun.h	19;"	d
STUN_DEFAULT_PORT	stun.h	14;"	d
STUN_MAX_VALUES	stun.h	15;"	d
SWITCH_CPY_STRING	keyinfo.c	189;"	d	file:
SeedPeer	peerdata.h	/^struct SeedPeer$/;"	s
SeedPeerSelectOne	peerdata.c	/^SeedPeerSelectOne(struct Iterator *pa_pISeedList)$/;"	f
SendBuff	smtpmail.h	/^	char            SendBuff[MAX_MAIL_CONTENT_LEN];$/;"	m	struct:SMTPProc
SetIPRes	stun.c	/^SetIPRes( uchar pa_ResTypeOpt , uint pa_IPVal )$/;"	f	file:
SetLevel	test/demos/treap-demo.c	/^void SetLevel(struct TreeNode* pa_pTnd , uint pa_level)$/;"	f
SetLevel	test/demos/tree-demo.c	/^void SetLevel(struct TreeNode* pa_pTnd , int pa_level)$/;"	f
SetLevelCallback	tree.h	/^typedef void (*SetLevelCallback)(struct TreeNode* , uint );$/;"	t
SetPeerByPeerData	bdgfun.c	/^SetPeerByPeerData(struct Peer *pa_pPeer,struct PeerData *pa_pPD)$/;"	f
SetPop3ProcByKeyInfo	bkgd.c	/^SetPop3ProcByKeyInfo(struct POP3Proc *pa_pPop3Proc ,struct KeyInfo *pa_pKeyInfo)$/;"	f	file:
SetPortRes	stun.c	/^SetPortRes( uchar pa_ResTypeOpt , ushort pa_port )$/;"	f	file:
SetSmtpProcByKeyInfo	bkgd.c	/^SetSmtpProcByKeyInfo(struct SMTPProc *pa_pSmtpProc ,struct KeyInfo *pa_pKeyInfo)$/;"	f	file:
SetStunProcByKeyInfo	bkgd.c	/^SetStunProcByKeyInfo(struct STUNProc *pa_pStunProc ,struct KeyInfo *pa_pKeyInfo)$/;"	f	file:
Sock	smtpmail.h	/^	struct Sock     Sock;$/;"	m	struct:SMTPProc	typeref:struct:SMTPProc::Sock
Sock	sock.h	/^struct Sock$/;"	s
SockClose	sock.c	/^SockClose( struct Sock* pa_sock )$/;"	f
SockDestory	sock.c	/^SockDestory()$/;"	f
SockGetLastErr	sock.c	/^SockGetLastErr()$/;"	f
SockGetLocalIP	sock.c	/^SockGetLocalIP( void (*Callback)(char* ,void*) , void* pa_else )$/;"	f
SockInit	sock.c	/^SockInit()$/;"	f
SockLocateTa	sock.c	/^SockLocateTa( struct Sock* pa_sock , uint in_IPVal , ushort pa_port )$/;"	f
SockOpen	sock.c	/^SockOpen(struct Sock* out_sock , int pa_proto , ushort pa_port)$/;"	f
SockRead	sock.c	/^SockRead( struct Sock* pa_sock )$/;"	f
SockSSLConnect	sock.c	/^SockSSLConnect( struct Sock* out_sock )$/;"	f
SockSetNonblock	sock.c	/^SockSetNonblock( struct Sock* pa_sock )$/;"	f
SockWrite	sock.c	/^SockWrite( struct Sock* pa_sock , struct Bys pa_bys )$/;"	f
SortList	list.c	/^SortList( struct Iterator* io_IHead , struct SortingInsertPa* in_sip)$/;"	f
SortListCallbackPa	list.c	/^struct SortListCallbackPa$/;"	s	file:
SortingInsertCallBack	list.h	/^typedef BOOL (*SortingInsertCallBack)(struct Iterator*, struct Iterator* , void*);$/;"	t
SortingInsertPa	list.h	/^struct SortingInsertPa$/;"	s
StepCallbk	netproc.h	/^typedef uchar (*StepCallbk)( struct Process* , uchar, struct Iterator*, struct Iterator*);$/;"	t
StepDo	netproc.h	/^	StepCallbk       StepDo;$/;"	m	struct:ProcessStep
StrBys	comdef.h	/^StrBys(const char* in_str)$/;"	f
StrTraceFormat	sysi.c	/^StrTraceFormat( char *in_str )$/;"	f
StunAttribute	stun.h	/^struct StunAttribute$/;"	s
StunFormulateChangeRequest	stun.c	/^StunFormulateChangeRequest(struct ChangeRequest* out_head , uchar pa_opt)$/;"	f
StunFormulateRequest	stun.c	/^StunFormulateRequest(struct StunHead* out_head)$/;"	f
StunGetAttrLenFromHead	stun.c	/^StunGetAttrLenFromHead( void *in_data , uint pa_MagicCookie )$/;"	f	file:
StunGetAttributes	stun.c	/^StunGetAttributes(void *in_data , uint *out_acc , uint pa_MagicCookie)$/;"	f	file:
StunGetResult	stun.c	/^StunGetResult(void *in_data, uint pa_len , uint pa_MagicCookie , $/;"	f
StunGetValue	stun.c	/^StunGetValue(ushort pa_attr, uint pa_i , int pa_val , uint pa_MagicCookie)$/;"	f	file:
StunHead	stun.h	/^struct StunHead$/;"	s
StunNotify	keyinfo.c	/^StunNotify(struct Process *pa_)$/;"	f	file:
TCP	sock.h	62;"	d
TKNET_CONDITIONS	netproc.h	57;"	d
TKNET_VER	head.h	1;"	d
TKNET_WAIT_LEVELS	netproc.h	56;"	d
TK_EXCEPTION	comdef.h	44;"	d
TK_NET_BDG_MSG_FLAG	bdgmsg.h	18;"	d
TK_NET_DATA_LEN	bdgmsg.h	16;"	d
TK_THREAD	bkgd.c	/^TK_THREAD( BackGround )$/;"	f
TK_THREAD	sysi.h	62;"	d
Test	test/demos/treap-demo.c	/^struct Test$/;"	s	file:
Test	test/demos/tree-demo.c	/^struct Test$/;"	s	file:
Test_compare	test/demos/treap-demo.c	/^BOOL Test_compare(struct BinTreeNode* pa_bigger,$/;"	f
Test_eq	test/demos/treap-demo.c	/^BOOL Test_eq(struct BinTreeNode* pa_bigger,$/;"	f
TkNetMsg	bdgmsg.h	/^struct TkNetMsg$/;"	s
Traversal	tree.c	/^Traversal(struct TreeNode* pa_pRoot , ListNodeCallBack pa_TraversalWay , ListNodeCallBack pa_NodeCallback , void* pa_else )$/;"	f
Treap	treap.h	/^struct Treap$/;"	s
TreapDragOut	treap.c	/^TreapDragOut( struct Treap* pa_pTp )$/;"	f
TreapInsert	treap.c	/^TreapInsert(struct Treap* pa_pFrom , struct Treap* pa_pTo , BinTreeCompareCallback pa_cmp , void* pa_else)$/;"	f
TreapRoateUp	treap.c	/^TreapRoateUp(struct Treap* pa_pTp)$/;"	f
TreeGetNodesLevel	tree.c	/^TreeGetNodesLevel(struct TreeNode* pa_pRoot , SetLevelCallback pa_slcbk)$/;"	f
TreeLevel	peerdata.h	/^	uint               TreeLevel;$/;"	m	struct:PeerData
TreeNode	tree.h	/^struct TreeNode$/;"	s
TreeSearchPa	tree.c	/^struct TreeSearchPa$/;"	s	file:
TypeToFind	keyinfo.h	/^	uchar TypeToFind;$/;"	m	struct:FindKeyInfoByTypePa
UDP	sock.h	61;"	d
UndergoLN	netproc.h	/^	struct ListNode  UndergoLN;$/;"	m	struct:Process	typeref:struct:Process::ListNode
UsrName	popmail.h	/^	char            UsrName[POP3_PROTO_USRNAME_MAX_LEN];$/;"	m	struct:POP3Proc
UsrName	smtpmail.h	/^	char            UsrName[SMTP_PROTO_USRNAME_MAX_LEN];$/;"	m	struct:SMTPProc
VCK	comdef.h	58;"	d
WSACLEAN	sock.h	27;"	d
WSACLEAN	sock.h	42;"	d
WSAINIT	sock.h	26;"	d
WSAINIT	sock.h	43;"	d
WatiLevel	netproc.h	/^struct WatiLevel$/;"	s
_BinTreeInorderTraversal	tree.c	/^_BinTreeInorderTraversal(struct BinTreeNode* pa_pBtn , ListNodeCallBack pa_NodeCallback , void* pa_else )$/;"	f	file:
_Bys	comdef.h	/^_Bys( char* pa_p , uint pa_size )$/;"	f
__TK_NET	tknet.h	15;"	d
_descr_exception_	comdef.h	/^_descr_exception_(const char* pa_presay ,uint pa_l)$/;"	f
_tkfree	sysi.c	/^_tkfree( void* pa_mem )$/;"	f
_tkmalloc	sysi.c	/^_tkmalloc( uint pa_len )$/;"	f
a	bdgmsg.h	/^	struct Peer     s,a,b,sx;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::
addr	bdgmsg.h	/^	struct NetAddr addr;$/;"	m	struct:BridgeHelloStepPa	typeref:struct:BridgeHelloStepPa::NetAddr
addr	bdgmsg.h	/^	struct NetAddr addr;$/;"	m	struct:BridgeMsg	typeref:struct:BridgeMsg::NetAddr
addr	bdgmsg.h	/^	struct NetAddr addr;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::NetAddr
addr	bdgmsg.h	/^	struct NetAddr addr;$/;"	m	struct:Peer	typeref:struct:Peer::NetAddr
addr	keyinfo.h	/^	struct NetAddr  addr;$/;"	m	struct:KeyInfo	typeref:struct:KeyInfo::NetAddr
addr	keyinfo.h	/^	struct NetAddr addr;$/;"	m	struct:FindKeyInfoByAddrPa	typeref:struct:FindKeyInfoByAddrPa::NetAddr
addr	peerdata.h	/^	struct NetAddr     addr;$/;"	m	struct:PeerData	typeref:struct:PeerData::NetAddr
addr	test/demo.c	/^	struct NetAddr addr;$/;"	m	struct:ChatProcess	typeref:struct:ChatProcess::NetAddr	file:
b	bdgmsg.h	/^	struct Peer     s,a,b,sx;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::
btnd	test/demos/tree-demo.c	/^	struct BinTreeNode btnd;$/;"	m	struct:Test	typeref:struct:Test::BinTreeNode	file:
btnd	treap.h	/^	struct BinTreeNode btnd;$/;"	m	struct:Treap	typeref:struct:Treap::BinTreeNode
compare	test/demos/list-demo.c	/^compare(struct Iterator* compared0 , struct Iterator* compared1 , void* pa_else)$/;"	f
content	popmail.h	/^	char   content[MAX_MAIL_CONTENT_LEN];$/;"	m	struct:NetInfoMail
cst_ifEnableLogFile	sysi.c	/^static BOOL cst_ifEnableLogFile[ LOG_FILES ];$/;"	v	file:
ctx	sock.h	/^	SSL_CTX     *ctx;$/;"	m	struct:Sock
else_pa	list.h	/^	void*			else_pa;$/;"	m	struct:SortingInsertPa
else_pa	tree.c	/^	void*             else_pa;$/;"	m	struct:TreeSearchPa	file:
flag	bdgmsg.h	/^	uchar           flag;$/;"	m	struct:TkNetMsg
flag	test/demos/popmail-demo.c	/^BOOL flag = 1;$/;"	v
found	keyinfo.h	/^	struct KeyInfo *found;$/;"	m	struct:FindKeyInfoByAddrPa	typeref:struct:FindKeyInfoByAddrPa::KeyInfo
found	keyinfo.h	/^	struct KeyInfo *found;$/;"	m	struct:FindKeyInfoByNumPa	typeref:struct:FindKeyInfoByNumPa::KeyInfo
found	keyinfo.h	/^	struct KeyInfo *found;$/;"	m	struct:FindKeyInfoByTypePa	typeref:struct:FindKeyInfoByTypePa::KeyInfo
found	keyinfo.h	/^	struct KeyInfo *found;$/;"	m	struct:FindKeyInfoByValidPa	typeref:struct:FindKeyInfoByValidPa::KeyInfo
g_BdgPeerAddr	main.c	/^struct NetAddr   g_BdgPeerAddr;$/;"	v	typeref:struct:NetAddr
g_BkgdMutex	bkgd.c	/^tkMutex g_BkgdMutex;$/;"	v
g_ConnectionNotify	bdgfun.c	/^CONNECT_CALLBK g_ConnectionNotify = NULL;$/;"	v
g_MainLoopFlag	main.c	/^BOOL             g_MainLoopFlag = 1;$/;"	v
g_MainLoopFlag	test/demos/bkgd-demo.c	/^BOOL g_MainLoopFlag = 1;$/;"	v
g_MainLoopFlag	test/demos/keyinfo-demo.c	/^BOOL g_MainLoopFlag = 1;$/;"	v
g_MyName	main.c	/^char             g_MyName[PEER_NAME_ID_LEN];$/;"	v
g_NATtype	main.c	/^uchar            g_NATtype = NAT_T_UNKNOWN;$/;"	v
g_NATtype	test/demos/bkgd-demo.c	/^uchar g_NATtype = NAT_T_UNKNOWN;$/;"	v
g_NATtype	test/demos/keyinfo-demo.c	/^uchar g_NATtype = NAT_T_UNKNOWN;$/;"	v
g_Relays	relay.c	/^uint g_Relays = 0;$/;"	v
g_TargetName	main.c	/^char             g_TargetName[PEER_NAME_ID_LEN];$/;"	v
g_WaitLevel	netproc.c	/^struct WatiLevel g_WaitLevel[TKNET_WAIT_LEVELS];$/;"	v	typeref:struct:WatiLevel
g_allocs	sysi.c	/^uint g_allocs = 0;$/;"	v
g_flag	test/demos/nattype-demo.c	/^BOOL g_flag = 1;$/;"	v
g_flag	test/demos/smtpmail-demo.c	/^BOOL g_flag = 1;$/;"	v
g_ifBkgdEnable	bkgd.c	/^BOOL    g_ifBkgdEnable = 0;$/;"	v
g_ifConfigAsFullCone	main.c	/^BOOL             g_ifConfigAsFullCone = 0;$/;"	v
g_pTargetName	main.c	/^char             *g_pTargetName = NULL;$/;"	v
get_window_id	tknet.sh	/^function get_window_id() $/;"	f
head	stun.h	/^	struct StunHead head;$/;"	m	struct:ChangeRequest	typeref:struct:ChangeRequest::StunHead
i	test/demos/list-demo.c	/^	int i;$/;"	m	struct:I	file:
i	test/demos/treap-demo.c	/^	uint i;$/;"	m	struct:Test	file:
i	test/demos/tree-demo.c	/^	int i;$/;"	m	struct:Test	file:
ifBkgdStunProc	bkgd.c	/^ifBkgdStunProc()$/;"	f
ifConnected	bdgmsg.h	/^	BOOL             ifConnected;\/\/if server client are disconnected for some reasons,$/;"	m	struct:BridgeClientProcPa
ifEnableSSL	popmail.h	/^	BOOL            ifEnableSSL;$/;"	m	struct:POP3Proc
ifEnableSSL	smtpmail.h	/^	BOOL            ifEnableSSL;$/;"	m	struct:SMTPProc
ifEnterSucc	popmail.h	/^	BOOL			ifEnterSucc;$/;"	m	struct:POP3Proc
ifFastSendWait	bdgmsg.h	/^	BOOL            ifFastSendWait;\/\/everytime client go to send "waiting" $/;"	m	struct:BridgeClientProcPa
ifNetAddrEqual	netaddr.h	/^ifNetAddrEqual(struct NetAddr *pa_0,struct NetAddr *pa_1)$/;"	f
ifPeerDataTreapNodeEqual	peerdata.c	/^ifPeerDataTreapNodeEqual(struct BinTreeNode* pa_pBinNode0 ,$/;"	f	file:
ifReadTkMsg	relay.h	/^ifReadTkMsg(struct Sock *pa_pSock)$/;"	f
ifSkipRegister	bdgmsg.h	/^	BOOL            ifSkipRegister;$/;"	m	struct:BridgeClientProcPa
info	bdgmsg.h	/^	uchar          info;$/;"	m	struct:BridgeMsg
isCurrentStepFirstTime	netproc.h	/^	BOOL             isCurrentStepFirstTime;$/;"	m	struct:Process
last	list.h	/^	struct ListNode *next,*last;$/;"	m	struct:ListNode	typeref:struct:ListNode::
last	list.h	/^	struct ListNode *now,*last;$/;"	m	struct:Iterator	typeref:struct:Iterator::
len	comdef.h	/^	uint  len;$/;"	m	struct:Bys
length	stun.h	/^	ushort length;$/;"	m	struct:ChangeRequest
length	stun.h	/^	ushort length;$/;"	m	struct:StunAttribute
length	stun.h	/^	ushort length;$/;"	m	struct:StunHead
level	test/demos/treap-demo.c	/^	uint level;$/;"	m	struct:Test	file:
level	test/demos/tree-demo.c	/^	int level;$/;"	m	struct:Test	file:
level	tree.c	/^	uint      level;$/;"	m	struct:LevelStackEle	file:
level	tree.c	/^	uint level;$/;"	m	struct:GetLevelPa	file:
ln	keyinfo.h	/^	struct ListNode ln;$/;"	m	struct:KeyInfo	typeref:struct:KeyInfo::ListNode
ln	peerdata.h	/^	struct ListNode ln;$/;"	m	struct:SeedPeer	typeref:struct:SeedPeer::ListNode
ln	popmail.h	/^	struct ListNode ln;$/;"	m	struct:NetInfoMail	typeref:struct:NetInfoMail::ListNode
ln	relay.h	/^	struct ListNode ln;$/;"	m	struct:RelayProc	typeref:struct:RelayProc::ListNode
ln	tree.c	/^	struct ListNode  ln;$/;"	m	struct:LevelStackEle	typeref:struct:LevelStackEle::ListNode	file:
ln	tree.h	/^	struct ListNode  ln;$/;"	m	struct:Branch	typeref:struct:Branch::ListNode
ln_cbk	tree.c	/^	ListNodeCallBack  ln_cbk;$/;"	m	struct:TreeSearchPa	file:
main	test/demo.c	/^int main(int n,char **args)$/;"	f
main	test/demos/bkgd-demo.c	/^int main()$/;"	f
main	test/demos/keyinfo-demo.c	/^int main()$/;"	f
main	test/demos/list-demo.c	/^int main()$/;"	f
main	test/demos/most-simple-UDP-demo.c	/^main(int argc, char **argv)$/;"	f
main	test/demos/nattype-demo.c	/^int main()$/;"	f
main	test/demos/netproc-demo.c	/^int main()$/;"	f
main	test/demos/peerdata-demo.c	/^int main()$/;"	f
main	test/demos/popmail-demo.c	/^int main()$/;"	f
main	test/demos/smtpmail-demo.c	/^int main()$/;"	f
main	test/demos/sock-demo.c	/^main()$/;"	f
main	test/demos/treap-demo.c	/^int main()$/;"	f
main	test/demos/tree-demo.c	/^int main()$/;"	f
main	test/experiment.c	/^int main()$/;"	f
msg	bdgmsg.h	/^	}msg;$/;"	m	struct:TkNetMsg	typeref:union:TkNetMsg::__anon1
next	list.h	/^	struct ListNode *next,*last;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
now	list.h	/^	struct ListNode *now,*last;$/;"	m	struct:Iterator	typeref:struct:Iterator::ListNode
num	keyinfo.h	/^	int      num;$/;"	m	struct:KeyInfo
num	popmail.h	/^	int    num;$/;"	m	struct:NetInfoMail
pBdgClientProc	bkgd.h	/^	struct BridgeProc      *pBdgClientProc;$/;"	m	struct:BackGroundArgs	typeref:struct:BackGroundArgs::BridgeProc
pBranch	tree.h	/^	struct Branch	*pBranch;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::Branch
pBytes	comdef.h	/^	const char* pBytes;$/;"	m	struct:Bys
pChild	tree.h	/^	struct TreeNode* pChild;$/;"	m	struct:Branch	typeref:struct:Branch::TreeNode
pFather	tree.h	/^	struct TreeNode	*pFather;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode
pFound	netproc.h	/^	struct ProcessStep   *pFound;$/;"	m	struct:FindStepByNamePa	typeref:struct:FindStepByNamePa::ProcessStep
pFound	peerdata.c	/^	struct SeedPeer *pFound;$/;"	m	struct:FindSeedPeerOfLeastRelaysPa	typeref:struct:FindSeedPeerOfLeastRelaysPa::SeedPeer	file:
pFound	relay.c	/^	struct RelayProc *pFound;$/;"	m	struct:FindRelayProcByRelayIDPa	typeref:struct:FindRelayProcByRelayIDPa::RelayProc	file:
pIInsert	list.h	/^	struct Iterator*	pIInsert;$/;"	m	struct:SortingInsertPa	typeref:struct:SortingInsertPa::Iterator
pInfoCache	bkgd.h	/^	struct KeyInfoCache    *pInfoCache;$/;"	m	struct:BackGroundArgs	typeref:struct:BackGroundArgs::KeyInfoCache
pInterval	netproc.h	/^	long   *pInterval;$/;"	m	struct:WatiLevel
pMainSock	bkgd.h	/^	struct Sock            *pMainSock;$/;"	m	struct:BackGroundArgs	typeref:struct:BackGroundArgs::Sock
pMyNameID	bdgmsg.h	/^	char            *pMyNameID;$/;"	m	struct:BridgeClientProcPa
pName	netproc.h	/^	const char       *pName;$/;"	m	struct:ProcessStep
pNameToFind	netproc.h	/^	const char           *pNameToFind;$/;"	m	struct:FindStepByNamePa
pNewList	list.c	/^	struct Iterator*		pNewList;$/;"	m	struct:SortListCallbackPa	typeref:struct:SortListCallbackPa::Iterator	file:
pPD	peerdata.h	/^	struct PeerData *pPD;$/;"	m	struct:SeedPeer	typeref:struct:SeedPeer::PeerData
pPeerDataRoot	bdgmsg.h	/^	struct PeerData *pPeerDataRoot;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::PeerData
pPeerDataRoot	bkgd.h	/^	struct PeerData        *pPeerDataRoot;$/;"	m	struct:BackGroundArgs	typeref:struct:BackGroundArgs::PeerData
pProcList	bdgmsg.h	/^	struct ProcessingList *pProcList;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::ProcessingList
pProcList	bkgd.h	/^	struct ProcessingList  *pProcList;$/;"	m	struct:BackGroundArgs	typeref:struct:BackGroundArgs::ProcessingList
pRetrys	netproc.h	/^	uchar  *pRetrys;$/;"	m	struct:WatiLevel
pSeedPeer	peerdata.h	/^	struct SeedPeer    *pSeedPeer;$/;"	m	struct:PeerData	typeref:struct:PeerData::SeedPeer
pSeedPeerCache	bdgmsg.h	/^	struct Iterator *pSeedPeerCache;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::Iterator
pSip	list.c	/^	struct SortingInsertPa*	pSip;$/;"	m	struct:SortListCallbackPa	typeref:struct:SortListCallbackPa::SortingInsertPa	file:
pSock	bdgmsg.h	/^	struct Sock     *pSock;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::Sock
pSock	nattype.h	/^	struct Sock    *pSock;$/;"	m	struct:STUNProc	typeref:struct:STUNProc::Sock
pSock	popmail.h	/^	struct Sock     *pSock;$/;"	m	struct:POP3Proc	typeref:struct:POP3Proc::Sock
pSock	relay.h	/^	struct Sock     *pSock;$/;"	m	struct:RelayProc	typeref:struct:RelayProc::Sock
pSock	test/demo.c	/^	struct Sock    *pSock;$/;"	m	struct:ChatProcess	typeref:struct:ChatProcess::Sock	file:
peer0	relay.h	/^	struct Peer     peer0,peer1;$/;"	m	struct:RelayProc	typeref:struct:RelayProc::Peer
peer1	relay.h	/^	struct Peer     peer0,peer1;$/;"	m	struct:RelayProc	typeref:struct:RelayProc::
port	netaddr.h	/^	ushort  port; $/;"	m	struct:NetAddr
ppMaxRetrys	netproc.h	/^	uchar            **ppMaxRetrys;$/;"	m	struct:ProcessStep
ppTargetNameID	bdgmsg.h	/^	char            **ppTargetNameID;$/;"	m	struct:BridgeClientProcPa
ppWaitClocks	netproc.h	/^	long             **ppWaitClocks;$/;"	m	struct:ProcessStep
proc	bdgmsg.h	/^	struct Process  proc;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::Process
proc	nattype.h	/^	struct Process proc;$/;"	m	struct:STUNProc	typeref:struct:STUNProc::Process
proc	popmail.h	/^	struct Process  proc;$/;"	m	struct:POP3Proc	typeref:struct:POP3Proc::Process
proc	relay.h	/^	struct Process  proc;$/;"	m	struct:RelayProc	typeref:struct:RelayProc::Process
proc	smtpmail.h	/^	struct Process  proc;$/;"	m	struct:SMTPProc	typeref:struct:SMTPProc::Process
proc	test/demo.c	/^	struct Process proc;$/;"	m	struct:ChatProcess	typeref:struct:ChatProcess::Process	file:
proto	sock.h	/^	int 	proto;$/;"	m	struct:Sock
res	bdgmsg.h	/^	BOOL           res;$/;"	m	struct:BridgeHelloStepPa
s	bdgmsg.h	/^	struct Peer     s,a,b,sx;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::Peer
sajfkjh	test/demos/list-demo.c	/^	struct ListNode sajfkjh;$/;"	m	struct:I	typeref:struct:I::ListNode	file:
set_build_time	tknet.sh	/^function set_build_time()$/;"	f
si_cbk	list.h	/^	SortingInsertCallBack 	si_cbk;$/;"	m	struct:SortingInsertPa
slcbk	tree.c	/^	SetLevelCallback slcbk;$/;"	m	struct:GetLevelPa	file:
socket	sock.h	/^	SOCKVAL	socket;$/;"	m	struct:Sock
ssl	sock.h	/^	SSL         *ssl;$/;"	m	struct:Sock
sta_AccRelayID	bdgstep.c	/^uint sta_AccRelayID = 1;$/;"	v
sta_BdgSubServerProc	bdgfun.c	/^static struct BridgeProc sta_BdgSubServerProc;$/;"	v	typeref:struct:BridgeProc	file:
sta_BkgdCmd	bkgd.c	/^char    sta_BkgdCmd[BKGD_CMD_MAX_LEN];$/;"	v
sta_ChangeAddrRes	stun.c	/^struct NetAddr sta_ChangeAddrRes;$/;"	v	typeref:struct:NetAddr
sta_IRelayProc	relay.c	/^static struct Iterator   sta_IRelayProc;$/;"	v	typeref:struct:Iterator	file:
sta_LoopFlag	keyinfo.c	/^static BOOL sta_LoopFlag;$/;"	v	file:
sta_MapAddrRes	stun.c	/^struct NetAddr sta_MapAddrRes;$/;"	v	typeref:struct:NetAddr
sta_ProcRes	keyinfo.c	/^static BOOL sta_ProcRes;$/;"	v	file:
sta_RelayProcess	relay.c	/^static struct RelayProc  sta_RelayProcess;$/;"	v	typeref:struct:RelayProc	file:
sta_RetryValue	netproc.c	/^uchar  sta_RetryValue[TKNET_CONDITIONS][TKNET_WAIT_LEVELS] = {$/;"	v
sta_WaitValue	netproc.c	/^long   sta_WaitValue[TKNET_CONDITIONS][TKNET_WAIT_LEVELS] = {$/;"	v
sta_ifBkgdCmdComing	bkgd.c	/^BOOL    sta_ifBkgdCmdComing;$/;"	v
sta_ifBkgdStunProc	bkgd.c	/^BOOL    sta_ifBkgdStunProc = 0;$/;"	v
sta_ifBkgdSubProcess	bkgd.c	/^BOOL    sta_ifBkgdSubProcess = 0;$/;"	v
sta_ifConnected	test/demo.c	/^static BOOL sta_ifConnected = 0;$/;"	v	file:
sta_pKeyInfoCache	keyinfo.c	/^static struct KeyInfoCache *sta_pKeyInfoCache;$/;"	v	typeref:struct:KeyInfoCache	file:
sta_pLogFile	sysi.c	/^static FILE *sta_pLogFile[ LOG_FILES ];$/;"	v	file:
sta_tim	sysi.c	/^sta_tim;$/;"	v	typeref:struct:timeval	file:
steps	netproc.h	/^	uchar            steps;$/;"	m	struct:Process
sx	bdgmsg.h	/^	struct Peer     s,a,b,sx;$/;"	m	struct:BridgeProc	typeref:struct:BridgeProc::
test_compare	test/demos/tree-demo.c	/^BOOL test_compare(struct BinTreeNode* pa_bigger,$/;"	f
test_eq	test/demos/tree-demo.c	/^BOOL test_eq(struct BinTreeNode* pa_bigger,$/;"	f
text	keyinfo.h	/^	char     text[KEY_INFO_MAX_LEN];$/;"	m	struct:KeyInfo
tk	list.c	/^tk(struct Iterator* i0 ,struct Iterator* i1)$/;"	f
tkBeginThread	sysi.c	/^tkBeginThread(void* (*pa_thread)(void*) ,void *pa_else )$/;"	f
tkFormatStr	sysi.c	/^tkFormatStr(char* pa_pDest, const char* pa_pFormat , ... )$/;"	f
tkGetRandom	sysi.c	/^tkGetRandom()$/;"	f
tkInitRandom	sysi.c	/^tkInitRandom()$/;"	f
tkLog	sysi.c	/^tkLog( uint pa_LogNum , const char* pa_log )$/;"	f
tkLogClose	sysi.c	/^tkLogClose()$/;"	f
tkLogInit	sysi.c	/^tkLogInit()$/;"	f
tkMilliseconds	sysi.c	/^tkMilliseconds()$/;"	f
tkMsSleep	sysi.c	/^tkMsSleep( unsigned long pa_ms )$/;"	f
tkMutex	sysi.h	68;"	d
tkMutex	sysi.h	76;"	d
tkNetConnect	main.c	/^tkNetConnect(const char *pa_pName)$/;"	f
tkNetInit	main.c	/^tkNetInit()$/;"	f	file:
tkNetInit	test/demos/bkgd-demo.c	/^void tkNetInit()$/;"	f
tkNetInit	test/demos/keyinfo-demo.c	/^void tkNetInit()$/;"	f
tkNetInit	test/demos/nattype-demo.c	/^void tkNetInit()$/;"	f
tkNetInit	test/demos/peerdata-demo.c	/^void tkNetInit()$/;"	f
tkNetInit	test/demos/popmail-demo.c	/^void tkNetInit()$/;"	f
tkNetInit	test/demos/smtpmail-demo.c	/^void tkNetInit()$/;"	f
tkNetMain	main.c	/^tkNetMain(int pa_argn,char **in_args)$/;"	f
tkNetUninit	main.c	/^tkNetUninit()$/;"	f	file:
tkNetUninit	test/demos/bkgd-demo.c	/^void tkNetUninit()$/;"	f
tkNetUninit	test/demos/keyinfo-demo.c	/^void tkNetUninit()$/;"	f
tkNetUninit	test/demos/nattype-demo.c	/^void tkNetUninit()$/;"	f
tkNetUninit	test/demos/peerdata-demo.c	/^void tkNetUninit()$/;"	f
tkNetUninit	test/demos/popmail-demo.c	/^void tkNetUninit()$/;"	f
tkNetUninit	test/demos/smtpmail-demo.c	/^void tkNetUninit()$/;"	f
tkfree	sysi.h	29;"	d
tkmalloc	sysi.h	26;"	d
tnd	tree.h	/^	struct TreeNode 	tnd;$/;"	m	struct:BinTreeNode	typeref:struct:BinTreeNode::TreeNode
tpnd	peerdata.h	/^	struct Treap       tpnd;$/;"	m	struct:PeerData	typeref:struct:PeerData::Treap
transId1	stun.h	/^	uint transId1;\/\/MagicCookie$/;"	m	struct:StunHead
transId2	stun.h	/^	uint transId2;$/;"	m	struct:StunHead
transId3	stun.h	/^	uint transId3;$/;"	m	struct:StunHead
transId4	stun.h	/^	uint transId4;$/;"	m	struct:StunHead
trp	test/demos/treap-demo.c	/^	struct	Treap trp;$/;"	m	struct:Test	typeref:struct:Test::Treap	file:
type	keyinfo.h	/^	uchar    type;$/;"	m	struct:KeyInfo
type	stun.h	/^	ushort type;$/;"	m	struct:ChangeRequest
type	stun.h	/^	ushort type;$/;"	m	struct:StunAttribute
type	stun.h	/^	ushort type;$/;"	m	struct:StunHead
uchar	comdef.h	/^typedef unsigned char  uchar;$/;"	t
uint	comdef.h	/^typedef unsigned int   uint;$/;"	t
ushort	comdef.h	/^typedef unsigned short ushort;$/;"	t
valid	keyinfo.h	/^	uchar    valid;$/;"	m	struct:KeyInfo
valid	keyinfo.h	/^	uchar valid;$/;"	m	struct:FindKeyInfoByValidPa
value	stun.h	/^	uint   value[STUN_MAX_VALUES];$/;"	m	struct:StunAttribute
value	stun.h	/^	uint  value;$/;"	m	struct:ChangeRequest
